# robin_node.cpp
node:   
    # RobinSubscriber<double, std_msgs::Float64> double_to_codesys(nh, "double_to_codesys");
    line: "  Robin{type}<{cpp}, {msg}> {name}(nh, \"{name}\");\n"
    file: |
        #include <ros/ros.h>
        #include <ros/console.h>
        #include "robin_bridge_generated/robin_inst.cpp"
        int main(int argc, char **argv)
        {{
          ros::init(argc, argv, "robin");
          ros::NodeHandle nh;
        {}  ROS_INFO("Robin node initiated...");
          ros::spin();
          return 0;
        }}
include: "#include \"{}.h\"\n"
# robin_inst.cpp
insts:
    line: "template class Robin{type}<{cpp}, {msg}>;\n"
    file: |-
        #include <cstdio>   // for std::snprintf()
        #include <cstring>  // for std::memcpy()
        #include <robin_bridge/robin_publisher.hpp>
        #include <robin_bridge/robin_subscriber.hpp>
        #include <robin_bridge_generated/structs.h>
        {}
# structs.h
structs:
    struct: "struct {name}\n{{\n{src}}};\n"
    line: "  {cpp} {name}{len};\n"
    file: |
        #ifndef ROBIN_STRUCTS_H
        #define ROBIN_STRUCTS_H
        #include <cstdint>
        {}#endif
msgs:
    line: "{ros}{len} {name}\n"

# specializations
specs:
    root:
              #DBG std::printf("[%s] reading shm...\n", name_.c_str());
              #DBG std::printf("[%s] writting shm...\n", name_.c_str());
        Publisher: |
            template<> void RobinPublisher<{cpp}, {msg}>::read()
            {{
            {src}}}
        Subscriber: |
            template<> void RobinSubscriber<{cpp}, {msg}>::write({msg} const *msg_ptr)
            {{
            {src}}}
    basic:
        Publisher: |
            {indent}msg_{msg_path} = (*shm_ptr_){shm_path};
        Subscriber: |
            {indent}(*shm_ptr_){shm_path} = (*msg_ptr){msg_path};
    derived:
        Publisher: |
            {indent}// pod struct to pod struct
            {indent}std::memcpy(&(msg_{msg_path}), &((*shm_ptr_){shm_path}), sizeof(msg_{msg_path}));
            {indent}// END pod struct to pod struct
        Subscriber: |
            {indent}// pod struct to pod struct
            {indent}std::memcpy(&((*shm_ptr_){shm_path}), &((*msg_ptr){msg_path}), sizeof((*shm_ptr_){shm_path}));
            {indent}// END pod struct to pod struct
    string:
        Publisher: |
            {indent}// char[] to std::string
            {indent}msg_{msg_path} = (*shm_ptr_){shm_path};
            {indent}// END char[] to std::string
        Subscriber: |
            {indent}// std::string to char[]
            {indent}std::snprintf((*shm_ptr_){shm_path}, sizeof((*shm_ptr_){shm_path}), "%s", (*msg_ptr){msg_path}.c_str());
            {indent}// END std::string to char[]
    array:
        Publisher: |
            {indent}// pod array to boost::array
            {indent}std::memcpy(msg_{msg_path}.data(), (*shm_ptr_){shm_path}, sizeof((*shm_ptr_){shm_path}));
            {indent}// END pod array to boost::array
        Subscriber: |
            {indent}// pod boost::array to array
            {indent}std::memcpy((*shm_ptr_){shm_path}, (*msg_ptr){msg_path}.data(), sizeof((*shm_ptr_){shm_path}));
            {indent}// END pod boost::array to array
    varlen_array:
        Publisher: |
            {indent}// pod array to std::vector
            {indent}size_t const shm_len_{idx} = sizeof((*shm_ptr_){shm_path}) / sizeof({base_cpp});
            {indent}msg_{msg_path}.assign((*shm_ptr_){shm_path}, (*shm_ptr_){shm_path} + shm_len_{idx});
            {indent}// END pod array to std::vector
        Subscriber: |
            {indent}// pod std::vector to array
            {indent}size_t const shm_len_{idx} = sizeof((*shm_ptr_){shm_path}) / sizeof({base_cpp});
            {indent}size_t msg_len_{idx} = std::min((*msg_ptr){msg_path}.size(), shm_len_{idx});
            {indent}std::memcpy((*shm_ptr_){shm_path}, (*msg_ptr){msg_path}.data(), sizeof({base_cpp}) * msg_len_{idx});
            {indent}zeroUnsentElements((*shm_ptr_){shm_path}, msg_len_{idx}, shm_len_{idx});
            {indent}// END pod std::vector to array
    nonpod_array:
        Publisher: |
            {indent}// non-pod array to boost::array
            {indent}size_t shm_len_{idx} = sizeof((*shm_ptr_){shm_path}) / sizeof({base_cpp});
            {indent}for (int i_{idx} = 0; i_{idx} < shm_len_{idx}; i_{idx}++)
            {indent}{{
            {src}{indent}}}
            {indent}// END non-pod array to boost::array
        Subscriber: |
            {indent}// non-pod boost::array to array
            {indent}size_t shm_len_{idx} = sizeof((*shm_ptr_){shm_path}) / sizeof({base_cpp});
            {indent}for (int i_{idx} = 0; i_{idx} < shm_len_{idx}; i_{idx}++)
            {indent}{{
            {src}{indent}}}
            {indent}// END non-pod boost::array to array
    nonpod_varlen_array:
        Publisher: |
            {indent}// non-pod array to std::vector
            {indent}size_t shm_len_{idx} = sizeof((*shm_ptr_){shm_path}) / sizeof({base_cpp});
            {indent}msg_{msg_path}.resize(shm_len_{idx});  //TODO execute only once, eg. in constructor
            {indent}for (int i_{idx} = 0; i_{idx} < shm_len_{idx}; i_{idx}++)
            {indent}{{
            {src}{indent}}}
            {indent}// END non-pod array to std::vector
        Subscriber: |
            {indent}// non-pod std::vector to array
            {indent}size_t shm_len_{idx} = sizeof((*shm_ptr_){shm_path}) / sizeof({base_cpp});
            {indent}size_t msg_len_{idx} = std::min((*msg_ptr){msg_path}.size(), shm_len_{idx});
            {indent}for (int i_{idx} = 0; i_{idx} < msg_len_{idx}; i_{idx}++)
            {indent}{{
            {src}{indent}}}
            {indent}zeroUnsentElements((*shm_ptr_){shm_path}, msg_len_{idx}, shm_len_{idx});
            {indent}// END non-pod std::vector to array

